=====================
bash技巧与注意事项
=====================

1. 赋值时=左右千万不要加空格

	有一次调试的时候因为右边多出一个空格，调试了半个多小时……

#. text=${key//\%%%??%%%/} 中第一个%为什么要转义？

	还有为什么 text="${text//?%%HI%%%/${COLOUR_HI}}" 要加第一个'?'符号？

	都是 eselect-1.2.15/libs/output.bash.in 中的代码。

#. for循环

	::

		for x in "$(ls *)"

	使用这种 for 循环的时候，后面的部分不能用引号，否则会被当作一个整体赋值
	给 x。(详见 http://mywiki.wooledge.org/BashGuide/TestsAndConditionals )

	但是我这里测试的结果是可以的。


#. && 和 -a，以及 || 和 -o 的区别

	"A && B"中， A在失败时不会执行B。"A || B"中，A 在成功时不会执行B。在
	[[]]中使用。

	而 -a 和 -o 会先执行完左右两个表达式，再计算最终的表达式，在[]中使用。

	应该尽量避免使用 -a 和 -o进行复杂的运算，如果需要进行这样的逻辑运算，可
	以用[ .. ] && [ .. ] 和 [ .. ] || [ .. ] 来代替。

#. 不要将 && 和 || 连起来使用

	例如 A && B && || C ，实际运行过程是，如果A失败，则会运行C，一般这不是
	我们想要的结果。

#. 将多行字符串赋值给一个变量

	但如果多行文字总有特殊字符，这样也不行。 ::

		text=$(cat <<EOF
		...
		...
		EOF
		)

#. 关于通配符和正则表达式匹配和大括号扩展

	通配符可以匹配文件名或者字符串，但通配符本身的匹配时不能加引号。

		# 列出所有文件 ::

			~$ echo *

		# 匹配字符串 ::

			~$ [[ "abc" = a* ]]

	另外通配符需要匹配整个字符串或者文件名，而不能只匹配其中的一部分，例如 ::

		[[ "abc" = b* ]]

	这个永远不会匹配。

	正则表达式可以用 =~ 来匹配字符串，但都不能加引号。通用方法是将其存储在
	变量中，然后在[[]]中不加引号使用，对于特殊字符，可以用反斜杠转义。匹配
	之后会将捕获的括号中的内容存储到 BASH_REMATCH 这个数组中，用数字作索引。 ::

		~$ {
		> [[ "abcdef" =~ (a.*?)(d.*?) ]]
		> echo ${BASH_REMATCH[1]}
		> echo ${BASH_REMATCH[2]}
		> }
		abc
		def
		~$

	大括号扩展也不能用引号。 ::

		~$ echo th{a,e}n
		than then
		~$ echo "th{a,e}n"
		th{a,e}n
		~$ echo ch0{1..9}
		ch01 ch02 ch03 ch04 ch05 ch06 ch07 ch08 ch09
		~$ echo a{,,d}
		a a ad
		~$

#. 从一个文件或者一个变量中逐行读取 ::

	while read line
	do
		...
	done < $filename
	----------------------------------------
	cat "$filename" | while read line
	do
		...
	done
	----------------------------------------
	echo "$filename" | while read line
	do
		...
	done

#. 正则表达式匹配的方法

	注意$regexp两边不能加引号

	::

		var="abc"
		regexp="a*c$"
		if [[ "$var" =~ $regexp ]]
		then
			echo "match"
		else
			echo "not match"
		fi

#. 关于eval

	eval set -- "$PARSE_ARGS" 与 set -- "$PARSE_ARGS"

	假设 PARSE_ARGS="abc def" ，二者的区别在于：前者的结果是将"abc"和"def"
	作为命令行参数，而后者则是将"abc def"作为命令行参数。

#. 关于 ${var-default} 与 ${var:-default}

	前者是当变量 ${var} 没有被设置时使用 default 的值，而后者是当 ${var} 没
	有被设置或者被设置为null时使用 default 的值。

	在用作测试参数时，应该使用前者，因为有可能调用者使用一个""作为参数。
